generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//AuthJS 
model User {
  id            String    @id @default(uuid())
  name          String?
  password      String?
  email         String    @unique
  image         String?
  emailVerified DateTime? @map("email_verified")
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  roles         String[]  @default(["editor"])
  banned        Boolean   @default(false)
  Article       Article[]
  description   String?
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

//Categories
model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  Article     Article[]
}

//Ads
model Advertisement {
  id             String  @id @default(uuid())
  title          String?
  destinationUrl String
  mediaLink      String
  vertical       Boolean @default(false)
}

//Banners
model Banner {
  id        String   @id @default(uuid())
  text      String
  bgColor   String
  textColor String
  showIcon  Boolean
  isActive  Boolean
  createdAt DateTime @default(now())
}

//Articles
enum ArticleVerticalAds {
  NONE
  LEFT
  RIGHT
}

model Article {
  id              String             @id @default(uuid())
  title           String
  slug            String             @default(uuid())
  description     String
  thumbnail       String
  priority        Int
  readingTime     Int
  content         String
  showAds         Boolean            @default(true)
  verticalAds     ArticleVerticalAds @default(RIGHT)
  horizontalAds   Boolean            @default(true)
  visibleForUsers Boolean            @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  creatorId String
  creator   User   @relation(fields: [creatorId], references: [id])
}

model RegisterAuthorization {
  id          String   @id @default(uuid())
  used        Boolean  @default(false)
  googleEmail String?
  validUntil  DateTime
}

// Site config
model SiteConfig {
  id                 String   @id @default(uuid())
  siteName           String
  siteDescription    String
  navbarCategories   String[]
  mainPageCategories String[]
  xLink              String?
  instagramLink      String?
  facebookLink       String?
}
